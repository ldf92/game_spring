<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>S_L_STAND_L</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>monster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
    alarm[0] :  vision check
    alarm[1] :  attack transition
*/
/** config variables*/
init_facing_dir = DIRECTION_LEFT; //initial facing direction
alert_range = 200;   //the range in pixtol that wake the skeleton
attack_range = 20;  //the distance for skeleton start attacking
vision_height = 70; //the height above the head of the skeleton where player will not be found
enemy_check_time = 100; //the timeout for walking
attack_speed = 20;  //attack speed, larger value means larger frequency
attack_speed_boost = 0; //speed boost ratio when attack imgae_index == 2 
walking_speed = 2;  //horizontal walking speed
animation_speed = 0.1;
//internal flag
is_attacking = 0;
succession_attack = 0;
facing = init_facing_dir;


hspeed = 0;  //horizontal speed
vspeed = 0;  //vertical speed
image_speed = animation_speed;
/** alert state:
    0 -&gt; sleep
    1 -&gt; wake_up
    2 -&gt; stand_by
    3 -&gt; walking
    4 -&gt; attack
    5 -&gt; dead
*/

state = 0;

check_vision_flag = 0; //flag for set the checking alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// switch to attack state

state = MONSTER_ATTACK;
//image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch to sleep state

state =MONSTER_SLEEP;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update sprite

if( state == MONSTER_SLEEP){
    if( facing == DIRECTION_LEFT )
        sprite_index = S_L_STAND_L;
    else
        sprite_index = S_L_STAND_R;
}
else if( state == MONSTER_WAKE_UP){

    if( facing == DIRECTION_LEFT )
        sprite_index = S_L_S2SB_L;
    else
        sprite_index = S_L_S2SB_R;
}
else if( state == MONSTER_STAND_BY){

    if( facing == DIRECTION_LEFT )
        sprite_index = S_L_STANDBY_L;
    else
        sprite_index = S_L_STANDBY_R;
}
else if( state == MONSTER_WALKING){
    if( hspeed == 0 ){
        if( facing == DIRECTION_LEFT )
            sprite_index = S_L_STANDBY_L;
        else
            sprite_index = S_L_STANDBY_R;
    }    
    else{
        if( facing == DIRECTION_LEFT )
            sprite_index = S_L_WALK_L;
        else
            sprite_index = S_L_WALK_R;
    }
        
}
else if( state == MONSTER_ATTACK){
        if( facing == DIRECTION_LEFT )
            sprite_index = S_L_ATTACK_L;
        else
            sprite_index = S_L_ATTACK_R;
}
else if( state == MONSTER_DEAD){
    if( facing == DIRECTION_LEFT )
        sprite_index = S_L_DEAD_L;
    else
        sprite_index = S_L_DEAD_R;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check and update state

//if current state is sleep
if( state == MONSTER_SLEEP ){
    //if the enemy is within the vision range
    if( (global.player_y + global.player_height) &gt; (y - vision_height) and global.player_y &lt; (y + sprite_height)){
       //if an enemy is within the distance range, change to walking state
       if( distance_to_point( global.player_x, global.player_y) &lt;= alert_range){
          //switch to wake_up
          state = MONSTER_WAKE_UP;
      }
    }
}
//if current state is wake_up
else if( state == MONSTER_WAKE_UP){
        //slow down the image speed 
//       image_speed = animation_speed * 0.5;
        
        //if the action is finished, switch state immediately
        if (image_index == (image_number - 1)){ 
 //               image_speed = animation_speed;                
                //if an enemy is within the attack range, change to attack state
                if( distance_to_point( global.player_x, global.player_y) &lt;= attack_range ){
                    state = MONSTER_ATTACK;
                }
                else
                    state = MONSTER_WALKING;
        }
}
else if( state == MONSTER_STAND_BY){
    //if an enemy is within the attack range, change to attack state
     if( distance_to_point( global.player_x, global.player_y) &lt;= attack_range ){
        //if this is the first attack after switch state, go to attack state directly
        if( !succession_attack ){
            state = MONSTER_ATTACK;
            succession_attack = 1;
        }
        else{
            //otherwise set alarm for the next attack action
            if( !is_attacking ){
                alarm[1] = attack_speed;
                is_attacking = 1;
            }
        }   
     }
     else{
        alarm[1] = -1;  //diSable the attack action
        is_attacking = 0;
        //go to walking state
        state = MONSTER_WALKING;    
     }
}
//if current state is walking
else if(state == MONSTER_WALKING){
    succession_attack = 0;  //reset flag
    
    //if the enemy is within the vision range
    if( (global.player_y + global.player_height) &gt; (y - vision_height) and global.player_y &lt; (y + sprite_height)){
        //if an enemy is within the attack range, change to attack state
        if( distance_to_point( global.player_x, global.player_y) &lt;= attack_range ){
            state = MONSTER_STAND_BY;
    }
        //reset the alarm and flag
        alarm[0] = -1;
        check_vision_flag = 0;
    }
    //if the enemy is outside the vision range, set the alarm
    else{
        if( check_vision_flag == 0){
            alarm[0] = enemy_check_time;
            check_vision_flag = 1;
        }
    }
}
//if current state is attack
else if( state == MONSTER_ATTACK){
    //if it is the last sprite, switch back to stand_by
    if (image_index == (image_number - 1)){
            state = MONSTER_STAND_BY;
            is_attacking = 0;   //reset attack flag
    }
}
//if current state is dead
else if( state == MONSTER_DEAD){
    //if it is the last sprite, destory this instance
     if (image_index == (image_number - 1)){
        instance_destroy();
    }
}
else{
    //nothing
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update speed


//only move during state walking
if( state == MONSTER_WALKING){
    //if enemy is on the left
    if( floor(global.player_center_x) &lt; floor(x - walking_speed* 2)){
        hspeed = -walking_speed;  
        facing = DIRECTION_LEFT;
                 
    }
    else if( floor(global.player_center_x) &gt; floor(x + walking_speed * 2) ){
        hspeed = walking_speed;
        facing = DIRECTION_RIGHT;
    }
    else
        hspeed = 0;
}
else if( state == MONSTER_ATTACK ){
    if( image_index == 2 ){
        //if enemy is on the left
        if( floor(global.player_center_x) &lt;= floor(x)){
            hspeed = -walking_speed * attack_speed_boost ; 
            facing = DIRECTION_LEFT;     
        } 
        if( floor(global.player_center_x) &gt; floor(x) ){
            hspeed = walking_speed * attack_speed_boost;  
            facing = DIRECTION_RIGHT;
        }
    }
    else{
        hspeed = 0;
    }
}
else{
    hspeed = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

draw_text(300,30,"state: " + string(state));
draw_text(300,50, string(distance_to_point( global.player_x, global.player_y)));
draw_text(300,70, "skeleton_y: " + string(y) + "skeleton_x: " + string(x));
draw_text(300,90, string(global.player_y + global.player_height) + " &gt; " + string(y - vision_height));
draw_text(300,110, string(global.player_y) + " &lt; " + string(y + sprite_height));
draw_text(300,130, "image_index: " + string(image_index) + "  " + " image_number: " + string(image_number));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
