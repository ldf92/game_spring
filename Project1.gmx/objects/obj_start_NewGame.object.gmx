<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.start_menu_position = 1;
//1 - new game
//2 - load game
//3 - extra
//4 - exit
/*
number_of_point = 

// the coordinates of the points on the circle
var vec_x;
var vec_y;

// the angle between every two points
angle_per_point = 360 / argument0;

//index i
i = 0;



repeat (argument0)
{
    angle = i * angle_per_point + 180;
    vec_x[i] = argument3 * cos(angle) + argument1;
    vec_y[i] = argument3 * sin(angle) + argument2;
    i++;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// making the new game bar pointing to the center of the circle
// all the time (check and make sure in every step)
/*
if(image_angle != point_direction(x, y, 800, 250))
{
    direction = point_direction(x, y, 800, 250);    
    image_angle = direction;
}
else
{
    image_speed = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// making the selected bar bigger and move to the center
// draw_sprite_ext( sprite, subimg, x, y, xscale, yscale, rot, color, alpha );
// e.g. draw_self = draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

// the center of the circle (800, 170)
// start game should be (440, 240)
// load game should be (450, 315)

if(global.start_menu_position == 1) // 1 = start game
{
    // 1. draw start game (it would be bigger and red color, and opaque)
    direction = point_direction(440, 240, 800, 170);    
    image_angle = direction;
    draw_sprite_ext( spr_start_NewGame, 0, 440, 240, image_xscale * 3, image_yscale * 4, image_angle, c_red, 1 );
    
     // 2. draw load game (it would be smaller and gray color and a little transparent)
    direction = point_direction(450, 315, 800, 170);    
    image_angle = direction;
    draw_sprite_ext( spr_start_LoadGame, 0, 450, 315, image_xscale * 2, image_yscale * 2, image_angle, c_gray, 0.8 );
}
else if(global.start_menu_position == 2) // 2 = load game
{
    // 1. draw start game
    direction = point_direction(440, 240, 800, 170);    
    image_angle = direction;
    draw_sprite_ext( spr_start_NewGame, 0, 440, 240, image_xscale * 2, image_yscale * 2, image_angle, c_gray, 0.8 );
    
     // 2. draw load game
    direction = point_direction(450, 315, 800, 170);    
    image_angle = direction;
    draw_sprite_ext( spr_start_LoadGame, 0, 450, 315, image_xscale * 3, image_yscale * 4, image_angle, c_red, 1 );
}





















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// menu going down
if(global.start_menu_position &lt; 4 and global.start_menu_position &gt; 0)
{
    global.start_menu_position ++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// menu going up
if(global.start_menu_position &gt; 1 and global.start_menu_position &lt; 5)
{
    global.start_menu_position --;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>102,14</point>
    <point>80,80</point>
  </PhysicsShapePoints>
</object>
